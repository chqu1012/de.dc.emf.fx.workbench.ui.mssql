package de.dc.emf.fx.workbench.ui.mssql.template;

import de.dc.emf.fx.workbench.ui.mssql.Table;
import de.dc.emf.fx.workbench.ui.mssql.template.IGenerator;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class MigrationServiceTemplate implements IGenerator<Table> {
  @Override
  public String gen(final Table input) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.sql.Connection;");
    _builder.newLine();
    _builder.append("import java.sql.DriverManager;");
    _builder.newLine();
    _builder.append("import java.sql.ResultSet;");
    _builder.newLine();
    _builder.append("import java.sql.SQLException;");
    _builder.newLine();
    _builder.append("import java.sql.Statement;");
    _builder.newLine();
    _builder.append("import java.time.Duration;");
    _builder.newLine();
    _builder.append("import java.time.LocalDateTime;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.logging.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import de.dc.emf.fx.workbench.jmetro.core.di.EmfFXPlatform;");
    _builder.newLine();
    _builder.append("import de.dc.emf.fx.workbench.jmetro.core.event.IEventBroker;");
    _builder.newLine();
    _builder.append("import de.dc.emf.fx.workbench.jmetro.core.model.EmfPrint;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import de.bytefish.jsqlserverbulkinsert.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class MigrationService<T> implements IMigrationService<T>{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String MSG_MIGRATION_CONSOLE_PRINT = \"/migration/step/console/print\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Logger LOGGER = Logger.getLogger(MigrationService.class.getSimpleName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Connection connectionSource;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Connection connectionDestination;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Connection getConnectionSource() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (connectionSource==null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(\"no source connection available!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return connectionSource;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Connection getConnectionDestination() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (connectionDestination==null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(\"no source connection available!\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return connectionDestination;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connect(String sourceJdbcUrl, String destinationJdbcUrl) throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connectSource(sourceJdbcUrl);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connectDestination(destinationJdbcUrl);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connectSource(String sourceJdbcUrl) throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connectionSource = DriverManager.getConnection(sourceJdbcUrl);\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connectDestination(String destinationJdbcUrl) throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connectionDestination = DriverManager.getConnection(destinationJdbcUrl);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void disconnect() throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("disconnectDestination();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("disconnectSource();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void disconnectSource() throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connectionSource.close();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void disconnectDestination() throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("connectionDestination.close();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int size() throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Statement statement = getConnectionSource().createStatement();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ResultSet resultSet = statement.executeQuery(\"SELECT count(*) FROM \"+getTableName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resultSet.next();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return resultSet.getInt(\"count\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected List<T> getRows(String query) throws SQLException{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<T> result = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Statement statement = getConnectionSource().createStatement();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ResultSet resultSet = statement.executeQuery(query);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (resultSet.next()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result.add(mapData(resultSet));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract T mapData(ResultSet resultSet);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<T> migrate(int offset, int countOfRows) throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IEventBroker eventBroker = EmfFXPlatform.getInstance(IEventBroker.class);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventBroker.post(MSG_MIGRATION_CONSOLE_PRINT, new EmfPrint(\"Fetch Data from Oracle DB\"));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<T> rows = getRows(getMigrationQuery(getTableName(), offset, countOfRows));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SqlServerBulkInsert<T> bulkInsert = new SqlServerBulkInsert<>(getMapping());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LocalDateTime start = LocalDateTime.now();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Start:\\t\"+start);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventBroker.post(MSG_MIGRATION_CONSOLE_PRINT, new EmfPrint(\"Start Bulk Insert:\\t\"+start));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (T row : rows) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bulkInsert.saveAll(getConnectionDestination(), Arrays.asList(row));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("eventBroker.post(MSG_MIGRATION_CONSOLE_PRINT, new EmfPrint(\"Stored data: \"+row));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOGGER.info(\"Stored data: \"+row);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LocalDateTime end = LocalDateTime.now();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"End:\\t\"+end);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Duration:\\t\"+Duration.between(start, end).getSeconds());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOGGER.info(\"Data imported:\\t\"+rows.size());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventBroker.post(MSG_MIGRATION_CONSOLE_PRINT, new EmfPrint(\"End Bulk Insert:\\t\"+end));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventBroker.post(MSG_MIGRATION_CONSOLE_PRINT, new EmfPrint(\"Duration:\\t\"+Duration.between(start, end).getSeconds()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("eventBroker.post(MSG_MIGRATION_CONSOLE_PRINT, new EmfPrint(\"Data imported:\\t\"+rows.size()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract String getMigrationQuery(String tableName, int offset, int countOfRows);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected abstract AbstractMapping getMapping();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  @Override
  public String name(final Table input) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("MigrationService.java");
    return _builder.toString();
  }
}
